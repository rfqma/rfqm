name: build and deploy production

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  FULL_IMAGE_NAME: ${{ secrets.REGISTRY_URL }}/${{ github.event.repository.name }}-prod
  NEW_TAG: ${{ github.sha }}

jobs:
  check-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
  build-and-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: authenticate to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: build and push docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          secrets: |
            NEXT_PUBLIC_PLACEHOLDER=placeholder
          tags: |
            ${{ env.FULL_IMAGE_NAME }}:latest
            ${{ env.FULL_IMAGE_NAME }}:${{ github.sha }}

      - name: deploy via ssh
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/devops/${{ github.event.repository.name }}-prod

            echo "${{ env.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY_URL }} -u ${{ env.REGISTRY_USERNAME }} --password-stdin

            docker compose pull ${{ github.event.repository.name }}-prod
            docker compose up -d

            echo "done!"
